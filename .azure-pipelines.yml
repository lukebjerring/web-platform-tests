# This is the configuration file for Azure Pipelines, used to run tests on
# macOS. Documentation to help understand this setup:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/multiple-phases
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/index
#
# In addition to this configuration file, the "Build pull requests from forks
# of this repository" setting must also be enabled in the Azure DevOps project:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github#validate-contributions-from-forks

trigger: none # disable builds for branches

jobs:
- job: root
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - template: tools/ci/azure/checkout.yml
  - script: |
      ./wpt test-jobs | while read job; do
        echo "$job"
        echo "##vso[task.setvariable variable=$job;isOutput=true]true";
      done
    name: test_jobs
    displayName: 'Run ./wpt test-jobs'
  - script: |
      # This assumes that refs/pull/1234/merge has been checked out, and that
      # the first parent is the target branch (usually master) and the second
      # parent the PR branch.
      echo Build.SourceBranch=$(Build.SourceBranch)
      echo Build.SourceBranchName=$(Build.SourceBranchName)
      echo Build.SourceVersion=$(Build.SourceVersion)
      echo System.PullRequest.SourceBranch=$(System.PullRequest.SourceBranch)
      echo System.PullRequest.TargetBranch=$(System.PullRequest.TargetBranch)
      MERGE_COMMIT=`git rev-parse HEAD`
      echo MERGE_COMMIT=$MERGE_COMMIT
      FIRST_PARENT=`git rev-parse HEAD^1`
      echo FIRST_PARENT=$FIRST_PARENT
      SECOND_PARENT=`git rev-parse HEAD^2`
      echo SECOND_PARENT=$SECOND_PARENT
      echo "##vso[task.setvariable variable=Merge;isOutput=true]$MERGE_COMMIT";
      echo "##vso[task.setvariable variable=TargetBranch;isOutput=true]$FIRST_PARENT";
      echo "##vso[task.setvariable variable=SourceBranch;isOutput=true]$SECOND_PARENT";
    name: commits
    displayName: 'Record commits'

- job: affected_macOS
  displayName: 'affected tests (Safari Technology Preview)'
  #dependsOn: root
  #condition: dependencies.root.outputs['test_jobs.stability']
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - template: tools/ci/azure/checkout.yml
  - template: tools/ci/azure/pip_install.yml
    parameters:
      packages: virtualenv
  - template: tools/ci/azure/install_fonts.yml
  - template: tools/ci/azure/install_certs.yml
  - template: tools/ci/azure/install_safari.yml
  - template: tools/ci/azure/update_hosts.yml
  - script: no_proxy='*' ./wpt run --yes --no-pause --no-fail-on-unexpected --no-restart-on-unexpected --log-wptreport $(Build.ArtifactStagingDirectory)/wpt_report.json --channel preview safari --affected HEAD^1
    displayName: 'Run tests'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish results'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/wpt_report.json'
      artifactName: 'results'
    condition: succeededOrFailed()

- job: affected_sans_changes_macOS
  displayName: 'affected tests without changes (Safari Technology Preview)'
  #dependsOn: root
  #condition: dependencies.root.outputs['test_jobs.stability']
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - template: tools/ci/azure/checkout.yml
  # check out first parent, which is the target branch
  - script: git checkout HEAD^1
    displayName: 'Checkout target branch'
  - template: tools/ci/azure/pip_install.yml
    parameters:
      packages: virtualenv
  - template: tools/ci/azure/install_fonts.yml
  - template: tools/ci/azure/install_certs.yml
  - template: tools/ci/azure/install_safari.yml
  - template: tools/ci/azure/update_hosts.yml
  - script: no_proxy='*' ./wpt run --yes --no-pause --no-fail-on-unexpected --no-restart-on-unexpected --log-wptreport $(Build.ArtifactStagingDirectory)/wpt_report.json --channel preview safari --affected HEAD@{1}
    displayName: 'Run tests'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish results'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/wpt_report.json'
      artifactName: 'results-without-patch'
    condition: succeededOrFailed()

- job: infrastructure_macOS
  displayName: 'infrastructure/ tests (macOS)'
  dependsOn: root
  condition: dependencies.root.outputs['test_jobs.wptrunner_infrastructure']
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - template: tools/ci/azure/checkout.yml
  - template: tools/ci/azure/pip_install.yml
    parameters:
      packages: virtualenv
  - template: tools/ci/azure/install_fonts.yml
  - template: tools/ci/azure/install_certs.yml
  - template: tools/ci/azure/install_chrome.yml
  - template: tools/ci/azure/install_firefox.yml
  - template: tools/ci/azure/install_safari.yml
  - template: tools/ci/azure/update_hosts.yml
  - template: tools/ci/azure/update_manifest.yml
  - script: no_proxy='*' ./wpt run --yes --no-manifest-update --manifest MANIFEST.json --metadata infrastructure/metadata/ --channel dev chrome infrastructure/
    displayName: 'Run tests (Chrome Dev)'
  - script: no_proxy='*' ./wpt run --yes --no-manifest-update --manifest MANIFEST.json --metadata infrastructure/metadata/ --channel nightly firefox infrastructure/
    displayName: 'Run tests (Firefox Nightly)'
  - script: no_proxy='*' ./wpt run --yes --no-manifest-update --manifest MANIFEST.json --metadata infrastructure/metadata/ --channel preview safari_webdriver infrastructure/
    displayName: 'Run tests (Safari Technology Preview)'

- job: tools_unittest_macOS
  displayName: 'tools/ unittests (macOS)'
  dependsOn: root
  condition: dependencies.root.outputs['test_jobs.tools_unittest']
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - template: tools/ci/azure/checkout.yml
  - template: tools/ci/azure/tox_pytest.yml
    parameters:
      directory: tools/
      toxenv: py27

- job: wptrunner_unittest_macOS
  displayName: 'tools/wptrunner/ unittests (macOS)'
  dependsOn: root
  condition: dependencies.root.outputs['test_jobs.wptrunner_unittest']
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - template: tools/ci/azure/checkout.yml
  - template: tools/ci/azure/tox_pytest.yml
    parameters:
      directory: tools/wptrunner/

- job: wpt_integration_macOS
  displayName: 'tools/wpt/ tests (macOS)'
  dependsOn: root
  condition: dependencies.root.outputs['test_jobs.wpt_integration']
  pool:
    vmImage: 'macOS-10.13'
  steps:
  # full checkout required
  - template: tools/ci/azure/install_chrome.yml
  - template: tools/ci/azure/install_firefox.yml
  - template: tools/ci/azure/update_hosts.yml
  - template: tools/ci/azure/tox_pytest.yml
    parameters:
      directory: tools/wpt/
